CREATE OR REPLACE PACKAGE Module_BSBusinessObjectFunct AS
--{
    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Package	: Module_BSBusinessObjectFunct (El nombre debe ser en ingles)
    Descripción	: Descripción de la funcionalidad que realiza este paquete.

    Autor	: Nombre del creador de este paquete.
    Fecha	: DD-MM-YYYY (Fecha Creación Paquete)  SAO (No Orden de Producción.)

    Historia de Modificaciones

    DD-MM-YYYY    <Autor>.SAONNNNN        Modificación
    -----------  -------------------    -------------------------------------

    ******************************************************************/

    --------------------------------------------------------------------
    -- Constantes
    -------------------------------------------------------------------- 
    --------------------------------------------------------------------
    -- Variables
    -------------------------------------------------------------------- 
    -------------------------------------------------------------------- 
    -- Cursores
    -------------------------------------------------------------------- 
    -----------------------------------
    -- Metodos publicos del package
    -----------------------------------

    -- Obtiene la Version actual del Paquete
    FUNCTION fsbVersion  return varchar2;


    PROCEDURE RunProcess
    (
	   IOVar1		    in/out	definicion,
	   IOVar2		    in/out	definicion,
	   IOVarN		    in/out	definicion,
	   onuErrorCode        out		errorlog.erlocodi%type,
	   osbErrorMessage	    out		errorlog.erlomens%type
    ) ;

--}
END Module_BSBusinessObjectFunct;
/
CREATE OR REPLACE PACKAGE BODY Module_BSBusinessObjectFunct AS

    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Package	: Module_BSBusinessObjectFunct (El nombre debe ser en ingles)
    Descripción	: Descripción de la funcionalidad que realiza este paquete.

    Autor	: Nombre del creador de este paquete.
    Fecha	: DD-MM-YYYY (Fecha Creación Paquete)  SAO (No Orden de Producción.)

    Historia de Modificaciones

    DD-MM-YYYY    <Autor>.SAONNNNN        Modificación
    -----------  -------------------    -------------------------------------

    ******************************************************************/

    -----------------------
    -- Constants
    -----------------------
    -- Constante con el SAO de la ultima version aplicada
    csbVERSION CONSTANT VARCHAR2(10) := 'SAOXXXXX';
    
    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: fsbVersion
    Descripcion	:

    Parametros	:	Descripcion
    Retorno     :
    	csbVersion        Version del Paquete

    Autor	   :
    Fecha	   :

    Historia de Modificaciones
    Fecha	ID Entrega
    Modificación

    02-06-2009
    Creación
    *****************************************************************/
    FUNCTION fsbVersion
    RETURN varchar2
    IS
    BEGIN
    --{
        RETURN (csbVersion);
    --}
    END fsbVersion;
    


    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: GetParameters
		  English Description
    Descripcion	: Descripcion

    Parametros	:	Descripcion

    Retorno     :

    Autor	: <Nombre Apellido del Autor>
    Fecha	: <DD-MM-YYYY>

    Historia de Modificaciones
    Fecha	   IDEntrega

    DD-MM-YYYY    <Autor>SAONNNNN
    Modificacion
    *****************************************************************/

    PROCEDURE GetParameters
    IS

    BEGIN
    --{

        pkErrors.push ('Module_BSBusinessObjectFunct.GetParameters');

        -- Evalua si fueron cargados los parametros anteriormente
        if ( boIsLoaded ) then
        --{
    	pkErrors.pop;
    	return ;
        --}
        end if ;

        -- Se fija cache de parametros
        pkGrlParamExtendedMgr.SetCacheOn ;

        -- Se validan parametros alfanumericos
        sbVar := pkGeneralParametersMgr.fsbGetStringValue ( ... );

        -- Se validan parametros numericos
        nuVar := pkGeneralParametersMgr.fnuGetNumberValue ( ... );

        -- Fija que ya fueron cargados los parametros
        boIsLoaded := TRUE ;

        pkErrors.pop;

    EXCEPTION

        when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

        when OTHERS then
            pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

    --}
    END GetParameters;




    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: RunProcess
		  English Description
    Descripcion	: Descripcion

    Parametros	:	Descripcion
	IOVar1	    Descripcion 1
	IOVar2	    Descripcion 2
	IOVarN	    Descripcion N
    Retorno	:
	onuErrorCode		Codigo del mensaje de Error Generado
				0    - Proceso satisfactorio
				<> 0 - Codigo del error
	osbErrorMessage		Mensaje de Error

    Autor	: <Nombre Apellido del Autor>
    Fecha	: <DD-MM-YYYY>

    Historia de Modificaciones
    Fecha	   IDEntrega

    DD-MM-YYYY    <Autor>SAONNNNN
    Modificacion
    ******************************************************************/

    PROCEDURE RunProcess
    (
	   IOVar1		    in/out	definicion,
	   IOVar2		    in/out	definicion,
	   IOVarN		    in/out	definicion,
	   onuErrorCode        out		errorlog.erlocodi%type,
	   osbErrorMessage	    out		errorlog.erlomens%type
    )
    IS
        --------------------------------------------------------------------
        -- Constantes
        --------------------------------------------------------------------
        --------------------------------------------------------------------
        -- Variables
        --------------------------------------------------------------------
        --------------------------------------------------------------------
        -- Cursores
        --------------------------------------------------------------------
        /* ***************************************************************** */
        /* ********              Metodos Encapsulados               ******** */
        /* ***************************************************************** */

        PROCEDURE Initialize is
        BEGIN
        --{

            pkErrors.Push('Module_BSBusinessObjectFunct.RunProcess.Initialize');

            -- Inicializa variables de Error

	    pkErrors.Initialize;

	    onuErrorCode 	:= pkConstante.EXITO;
	    osbErrorMessage	:= pkConstante.NULLSB;

	    pkErrors.Pop;

        EXCEPTION

            when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
                pkErrors.Pop;
                pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

            when OTHERS then
                pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
                pkErrors.Pop;
                pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

        --}
        END Initialize;

        /* -------------------------------------------------------------- */

        PROCEDURE ClearMemory IS
        BEGIN
        --{

	    pkErrors.Push('Module_BSBusinessObjectFunct.RunProcess.ClearMemory');

	    -- Limpia toda la memoria cache
	    pktblTabla.ClearMemory;

	    pkErrors.Pop;

        EXCEPTION

            when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
                pkErrors.Pop;
                pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

            when OTHERS then
                pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
                pkErrors.Pop;
                pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);
        --}
        END ClearMemory;

        /* ***************************************************************** */

    BEGIN
    --{
        pkErrors.Push('Module_BSBusinessObjectFunct.RunProcess');

        -- Inicializa variables para proceso
        Initialize;

        -- Limpia memoria cache
        ClearMemory;

        -- Valida datos de entrada
	Module_BSBusinessObjectFunct.ValInputData;

	-- Valida datos basicos
	Module_BSBusinessObjectFunct.ValBasicData ;

	-- Ejecuta objeto de negocio
	pkBOBusinessObjectFunct.RunProcess ;

	pkErrors.Pop;

    EXCEPTION

      when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
          pkErrors.Pop;
          pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

      when OTHERS then
          pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
          pkErrors.Pop;
          pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);
    
    --}
    END RunProcess;



    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: functionName
    Descripcion	:

    Parametros	:	Descripcion
    Retorno     :
    	csbVersion        Version del Paquete

    Autor	   :
    Fecha	   :

    Historia de Modificaciones
    Fecha	ID Entrega
    Modificación

    02-06-2009
    Creación
    *****************************************************************/

    PROCEDURE ValInputData
    (
	   IVar1		    in    definicion,
	   IVar2		    in    definicion,
	   IVarN		    in    definicion
    )
    IS

    BEGIN
    --{

        pkErrors.push ('Module_BSBusinessObjectFunct.ValInputData');

        -- Valida IVar1
        ValIVar1 ( IVar1 );

        -- Valida IVar2
        ValIVar2 ( IVar2 );

        -- Valida IVarN
        ValIVarN ( IVarN );

        pkErrors.pop;

    EXCEPTION

        when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

        when OTHERS then
            pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);
    
    --}
    END ValInputData;



    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: functionName
    Descripcion	:

    Parametros	:	Descripcion
    Retorno     :
    	csbVersion        Version del Paquete

    Autor	   :
    Fecha	   :

    Historia de Modificaciones
    Fecha	ID Entrega
    Modificación

    02-06-2009
    Creación
    *****************************************************************/
    
    PROCEDURE ValBasicData
    IS

    BEGIN
    --{

        pkErrors.push ('Module_BSBusinessObjectFunct.ValBasicData');

        -- Validaciones requeridas para el proceso

        pkErrors.pop;
    
    EXCEPTION

        when LOGIN_DENIED or pkConstante.exERROR_LEVEL2 then
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);

        when OTHERS then
            pkErrors.NotifyError(pkErrors.fsbLastObject, sqlerrm, osbErrorMessage);
            pkErrors.Pop;
            pkErrors.GetErrorVar(onuErrorCode, osbErrorMessage);
    --}
    END ValBasicData;

    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: ProcedureName
    Descripcion	:

    Parametros	:	Descripcion
    Retorno     :
    	csbVersion        Version del Paquete

    Autor	   :
    Fecha	   :

    Historia de Modificaciones
    Fecha	ID Entrega
    Modificación

    02-06-2009
    Creación
    *****************************************************************/
    PROCEDURE ProcedureName
    (
        param1          in/out    dataType,
        param2          in/out    dataType,
           .
           .
           .
        paramn          in/out    dataType
    )
    IS
    BEGIN
        null;
    END ProcedureName;

    /*****************************************************************
    Propiedad intelectual de Open International Systems. (c).

    Procedure	: functionName
    Descripcion	:

    Parametros	:	Descripcion
    Retorno     :
    	csbVersion        Version del Paquete

    Autor	   :
    Fecha	   :

    Historia de Modificaciones
    Fecha	ID Entrega
    Modificación

    02-06-2009
    Creación
    *****************************************************************/
    FUNCTION functionName
    (
        param1          in/out    dataType,
        param2          in/out    dataType,
           .
           .
           .
        paramn          in/out    dataType
    )
    RETURN dataType
    IS
    BEGIN
        null;
    END functionName;
    
END Module_BSBusinessObjectFunct;
/
